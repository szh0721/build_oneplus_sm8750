name: Build_oneplus_13t_sm87501
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    # Set the default working directory for all steps in this job to /mnt
    defaults:
      run:
        working-directory: /mnt
    steps:
      - name: üìä Check disk space (Ê£ÄÊü•Á£ÅÁõòÁ©∫Èó¥)
        run: |
          echo "ÊûÑÂª∫ÂâçÁ£ÅÁõòÁ©∫Èó¥Ôºö"
          df -h

      - name: ‚öôÔ∏è Set REPO_MANIFEST (ËÆæÁΩÆÂØπÂ∫îÊú∫ÂûãÈÖçÁΩÆÊñá‰ª∂)
        run: |
          echo "REPO_MANIFEST=oneplus_13t" >> $GITHUB_ENV
          echo "DEVICES_NAME=oneplus_13t" >> $GITHUB_ENV

      - name: ‚öôÔ∏è Set device-specific CCACHE_DIR (ËÆæÁΩÆÂØπÂ∫îÊú∫ÂûãCcecheË∑ØÂæÑ)
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: üì¶ Configure Git (ËÆæÁΩÆ‰∏ãËΩΩË¥¶Êà∑)
        run: |
          git config --global user.name "Q1udaoyu"
          git config --global user.email "sucisama2888@gmail.com"

      - name: üõ† Cache APT packages (ÁºìÂ≠òAPTÂåÖ)
        uses: actions/cache@v3
        with:
          path: /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: üì¶ Install dependencies (ÂÆâË£Ö‰æùËµñ)
        run: |
          echo "Êõ¥Êñ∞APTÂåÖÂàóË°®..."
          sudo apt-get update -qq

          sudo apt-get install -y --no-install-recommends \
          python3 git curl ccache libelf-dev \
          build-essential flex bison libssl-dev \
          libncurses-dev liblz4-tool zlib1g-dev \
          libxml2-utils rsync unzip

          ccache --version
          echo "‰æùËµñÂÆâË£ÖÂÆåÊàê"

      - name: üõ† Cache Custom Clang (ÁºìÂ≠òËá™ÂÆö‰πâ Clang ÁºñËØëÂô®)
        uses: actions/cache@v3
        with:
          path: /mnt/clang
          key: clang-19.0.0git-20240723-${{ runner.os }}
          restore-keys: |
            clang-19.0.0git-20240723-${{ runner.os }}

      - name: üì• Download and setup Custom Clang (‰∏ãËΩΩÂπ∂ËÆæÁΩÆËá™ÂÆö‰πâ Clang ÁºñËØëÂô®)
        run: |
         CLANG_DIR="/mnt/clang"

         if [ ! -f "$CLANG_DIR/.clang_setup_complete" ]; then
          echo "‰∏ãËΩΩÂπ∂Ëß£Âéã Clang..."
          sudo rm -rf "$CLANG_DIR"
          sudo mkdir -p "$CLANG_DIR"
          sudo chown -R $USER:$USER "$CLANG_DIR"
          
          cd "$CLANG_DIR"

          wget -O clang.tar.gz https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240723-release/Clang-19.0.0git-20240723.tar.gz
          tar -xzf clang.tar.gz
          rm clang.tar.gz
          touch .clang_setup_complete

          echo "Clang ‰∏ãËΩΩ‰∏éËß£ÂéãÂÆåÊàê"
         else
          echo "‰ΩøÁî®ÁºìÂ≠òÁöÑ Clang ÁºñËØëÂô®"
         fi

         echo "CLANG_PATH=$CLANG_DIR" >> $GITHUB_ENV
         echo "CLANG_BIN_DIR=$CLANG_DIR/bin" >> $GITHUB_ENV
         "$CLANG_DIR/bin/clang" --version


      - name: üì• Restore ccache (ËΩΩÂÖ• Êú∫ÂûãÔºö${{ env.DEVICES_NAME }}ÁöÑ ccache ÁºìÂ≠ò)
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: üì• Init ccache (Â¶ÇÊûúÊòØÁ¨¨‰∏ÄÊ¨°ËøêË°åÂàôÂàùÂßãÂåñCceche)
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "ÂàùÂßãÂåñ ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache Â∑≤ÂàùÂßãÂåñÔºåË∑≥Ëøá"
            fi
          else
            echo "Êú™ÂÆâË£Ö ccacheÔºåË∑≥Ëøá"
          fi

      - name: üì• Install repo tool (‰∏ãËΩΩrepoÂ∑•ÂÖ∑)
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: üì• Initialize repo and sync (ÂàùÂßãÂåñrepoÂπ∂ÂêåÊ≠•ÂÜÖÊ†∏Ê∫êÁ†Å)
        run: |
         sudo mkdir -p kernel_workspace
         sudo chown -R $USER:$USER kernel_workspace
         cd kernel_workspace
         repo init -u https://github.com/szh0721/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: ‚öôÔ∏è Set up SukiSU Ultra (ÈÖçÁΩÆ SukiSU Ultra)
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" | bash -s susfs-main
         cd ./KernelSU
         KSU_API_VERSION_LOCAL=$(grep -m1 -oP 'KSU_API_VERSION_LOCAL\s*:=\s*\K\d+' kernel/Makefile || echo "1")
         KSU_COMMIT_HASH=$(git rev-parse --short=8 HEAD)
         KSU_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
         KSU_API_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10000 "+" 700)
         KSU_VERSION="v${KSU_API_VERSION_LOCAL}-${KSU_COMMIT_HASH}@${KSU_BRANCH_NAME}\\"
         echo "KSUVER=$KSU_API_VERSION" >> $GITHUB_ENV
         
         escape_sed() {
             echo "$1" | sed 's/[][\/\.*^$]/\\&/g'
         }
         
         OLD_KSU_VERSION=$(grep -m1 -oP 'ccflags-y\s*\+=\s*-DKSU_VERSION=\\"\K[^"]+' kernel/Makefile || echo "\$(KSU_KERNEL_VERSION)\\")
         OLD_KSU_API_VERSION=$(grep -m1 -oP 'ccflags-y\s*\+=\s*-DKSU_API_VERSION=\K\d+' kernel/Makefile || echo "\$(KSU_API_VERSION)")
         
         OLD_KSU_VERSION_ESC=$(escape_sed "$OLD_KSU_VERSION")
         KSU_VERSION_ESC=$(escape_sed "$KSU_VERSION")
         OLD_KSU_API_VERSION_ESC=$(escape_sed "$OLD_KSU_API_VERSION")
         KSU_API_VERSION_ESC=$(escape_sed "$KSU_API_VERSION")
         
         sed -i.bak "s/-DKSU_VERSION=\\\\\"${OLD_KSU_VERSION_ESC}\\\\\"/-DKSU_VERSION=\\\\\"${KSU_VERSION_ESC}\\\\\"/" kernel/Makefile
         sed -i.bak "s/-DKSU_API_VERSION=${OLD_KSU_API_VERSION_ESC}/-DKSU_API_VERSION=${KSU_API_VERSION_ESC}/" kernel/Makefile
        
      - name: üîß Set up SUSFS (ÈÖçÁΩÆ SUSFS)
        run: |
           cd kernel_workspace
           git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
           git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

           cd kernel_platform        
           cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
           cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
           cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

           cd ./common
           patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
           cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
           patch -p1 -F 3 < syscall_hooks.patch
           echo "ÂÆåÊàê"

      - name: üîß Set gki_defconfig (ËÆæÁΩÆÁºñËØëÈÖçÁΩÆ)
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
  
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: üîß Set Kernel name (ËÆæÁΩÆÂÜÖÊ†∏ÂêçÁß∞)
        run: |
         cd kernel_workspace/kernel_platform
         sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
         sudo sed -i 's/-4k/-android15-8-gba3bcfd39307-abogki413159095-4k/g' ./common/arch/arm64/configs/gki_defconfig


      - name: üî® Build Kernel (ÊûÑÂª∫ÂÜÖÊ†∏)
        run: |
          echo "È™åËØÅ Clang Ë∑ØÂæÑ: ${{ env.CLANG_PATH }}"
          echo "È™åËØÅ Clang ‰∫åËøõÂà∂ÁõÆÂΩï: ${{ env.CLANG_BIN_DIR }}"
          
          if [ ! -d "${{ env.CLANG_BIN_DIR }}" ]; then
            echo "ÈîôËØØ: Clang ‰∫åËøõÂà∂ÁõÆÂΩï‰∏çÂ≠òÂú®"
            exit 1
          fi
          
          if [ ! -x "${{ env.CLANG_BIN_DIR }}/clang" ]; then
            echo "ÈîôËØØ: clang ÂèØÊâßË°åÊñá‰ª∂‰∏çÂ≠òÂú®"
            ls -la "${{ env.CLANG_BIN_DIR }}/"
            exit 1
          fi
          
          export PATH="/usr/lib/ccache:${{ env.CLANG_BIN_DIR }}:$PATH"
          export KBUILD_BUILD_USER="kleaf"
          export KBUILD_BUILD_HOST="build-host"
          export KBUILD_BUILD_TIMESTAMP="Fri Apr 25 01:56:53 UTC 2025"
          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          
          which clang
          "${{ env.CLANG_BIN_DIR }}/clang" --version
          
          ls -la "${{ env.CLANG_BIN_DIR }}/aarch64"* 2>/dev/null || echo "Êú™ÊâæÂà∞ aarch64 ÂâçÁºÄÁöÑÂ∑•ÂÖ∑"
          ls -la "${{ env.CLANG_BIN_DIR }}/llvm-"* 2>/dev/null || echo "Êú™ÊâæÂà∞ llvm Â∑•ÂÖ∑"
          
          sudo apt install -y libelf-dev
          
          cd kernel_workspace/kernel_platform/common
          
          make clean && make mrproper
          rm -rf out 
          mkdir -p out
         
          make ARCH=arm64 SUBARCH=arm64 O=out \
            LLVM=1 \
            LLVM_IAS=1 \
            CC="ccache ${{ env.CLANG_BIN_DIR }}/clang" \
            CXX="ccache ${{ env.CLANG_BIN_DIR }}/clang++" \
            HOSTCC="ccache ${{ env.CLANG_BIN_DIR }}/clang" \
            HOSTCXX="ccache ${{ env.CLANG_BIN_DIR }}/clang++" \
            CROSS_COMPILE=aarch64-linux-gnu- \
            RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=${{ env.CLANG_BIN_DIR }}/ld.lld \
            HOSTLD=${{ env.CLANG_BIN_DIR }}/ld.lld \
            CLANG_AUTOFDO_PROFILE="../android/gki/aarch64/afdo/kernel.afdo" \
            gki_defconfig
            
          make ARCH=arm64 SUBARCH=arm64 -j$(nproc --all) O=out \
            LLVM=1 \
            LLVM_IAS=1 \
            CC="ccache ${{ env.CLANG_BIN_DIR }}/clang" \
            CXX="ccache ${{ env.CLANG_BIN_DIR }}/clang++" \
            HOSTCC="ccache ${{ env.CLANG_BIN_DIR }}/clang" \
            HOSTCXX="ccache ${{ env.CLANG_BIN_DIR }}/clang++" \
            CROSS_COMPILE=aarch64-linux-gnu- \
            RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=${{ env.CLANG_BIN_DIR }}/ld.lld \
            HOSTLD=${{ env.CLANG_BIN_DIR }}/ld.lld \
            CLANG_AUTOFDO_PROFILE="../android/gki/aarch64/afdo/kernel.afdo"

      - name: üìä Check ccache statistics (Ê£ÄÊü•ccacheÁªüËÆ°‰ø°ÊÅØ)
        run: |
          ccache -s
         
      - name: üì¶ Make AnyKernel3 (ÂàõÂª∫AnyKernel3)
        run: |
         # Use sudo to create the directory in /mnt, then change ownership to the current user
         sudo mkdir -p AnyKernel3
         sudo chown -R $USER:$USER AnyKernel3
         # Clone the repository into the newly created and permission-adjusted directory
         git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1 ./AnyKernel3
         
         rm -rf ./AnyKernel3/.git
         rm -rf ./AnyKernel3/push.sh
         cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: üì§ Upload AnyKernel3 (‰∏ä‰º† AnyKernel3)
        uses: actions/upload-artifact@v4
        with:
         name: AnyKernel3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU
         path: ./AnyKernel3/*
         
      - name: üìä Post-build disk check (ÊûÑÂª∫ÂêéÁ©∫Èó¥Ê£ÄÊü•)
        run: |
          echo "ÊûÑÂª∫ÂêéÁ£ÅÁõòÁ©∫Èó¥Ôºö"
          df -h
